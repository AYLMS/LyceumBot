import pickle

from aiogram.types import Message, CallbackQuery
from aiogram_dialog import DialogManager, Dialog
from aiogram_dialog import Window
from aiogram_dialog.manager.protocols import ManagedDialogAdapterProto
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Next, SwitchTo, Button
from aiogram_dialog.widgets.text import Const, Format
from requests import Session

from app import sessionmanager, bot
from app.states.register import RegistrationDialog


async def login_handler(
    m: Message, dialog: ManagedDialogAdapterProto, manager: DialogManager
):
    manager.current_context().dialog_data["login"] = m.text
    await dialog.next()


async def password_handler(
    m: Message, dialog: ManagedDialogAdapterProto, manager: DialogManager
):
    manager.current_context().dialog_data["password"] = m.text
    await dialog.next()


async def get_user_information(dialog_manager: DialogManager, **kwargs):
    return {
        "login": dialog_manager.current_context().dialog_data["login"],
        "password": dialog_manager.current_context().dialog_data["password"],
    }


async def login(c: CallbackQuery, button: Button, manager: DialogManager):
    login = manager.current_context().dialog_data["login"]
    password = manager.current_context().dialog_data["password"]
    request_session = Session()
    request = request_session.post(
        "https://passport.yandex.ru/auth", data={"login": login, "passwd": password}
    )
    if request.status_code == 200:
        pickle_dump = pickle.dumps(request_session.cookies)
        async with sessionmanager() as session:
            await session.change_user(c.from_user.id, "cookies", pickle_dump)
            await session.change_user(c.from_user.id, "registered", True)
        await manager.done()
        await bot.send_message(
            c.from_user.id,
            "<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ.</b> \n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞. \n\n"
            "<b>üéõ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ -</b> /help",
        )


ui = Dialog(
    Window(
        Const("<b>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Yandex ID</b>"),
        Next(Const("üöÄ –ù–∞—á–∞—Ç—å")),
        state=RegistrationDialog.greeting,
    ),
    Window(
        Const("<b> üë®üèª‚Äçüíª –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω</b>"),
        MessageInput(login_handler),
        state=RegistrationDialog.login_page,
    ),
    Window(
        Const("<b> üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å</b>"),
        MessageInput(password_handler),
        state=RegistrationDialog.password_page,
    ),
    Window(
        Const("<b>‚ÑπÔ∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: </b> \n"),
        Format("<b>üë®üèª‚Äçüíª –õ–æ–≥–∏–Ω:</b> <code>{login}</code>"),
        Format("<b>üîê –ü–∞—Ä–æ–ª—å: <code>{password}</code></b>"),
        SwitchTo(
            Const("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"),
            state=RegistrationDialog.login_page,
            id="change_information",
        ),
        Button(Const("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), on_click=login, id="confirm"),
        getter=get_user_information,
        state=RegistrationDialog.confirmation_page,
    ),
)
