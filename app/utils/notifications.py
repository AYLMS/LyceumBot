import json
from datetime import datetime

import app
from app.keyboards.inline.course_keyboard import get_course_keyboard
from app.utils.api import read_notification
from app.utils.staff import solution_result


async def send_notifications(user_id, notifications_json, cookies, csrf_token):
    notifications: dict = notifications_json["notificationMap"]
    for notification in notifications.values():
        text = "<b>üîî –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ </b> \n\n"
        notification_type = notification["type"]

        await read_notification(cookies, notification['id'], csrf_token)

        reply_markup = None

        if notification_type == "lesson-opened":
            text += f"üìö –û—Ç–∫—Ä—ã—Ç –Ω–æ–≤—ã–π —É—Ä–æ–∫ <b>{notification['objectData']['title']}</b> \n"
            date = datetime.fromisoformat(notification['addedTime'])
            text += f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>{date.strftime('%d.%m.%Y %H:%M')}</b> \n"
            course_id = notification["objectData"]["course"]
            lesson_id = notification["objectData"]["lessonId"]
            group_id = notification["objectData"]["group"]
            reply_markup = get_course_keyboard(course_id, group_id, lesson_id)
        elif notification_type == "bonus-score-changed":
            text += f"üìà {notification['objectData']['changedBy']} –∏–∑–º–µ–Ω–∏–ª(–∞) –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–ª —Å {notification['objectData']['oldScore']} –Ω–∞ {notification['objectData']['newScore']} \n"
        elif notification_type == "task-solution-reviewed":
            text += f"üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {notification['objectData']['task']['title']} —É—Ä–æ–∫–∞ {notification['objectData']['task']['lesson']['title']} –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {solution_result[notification['objectData']['status']['type']]} \n"
        elif notification_type == "task-solution-commented":
            text += f"‚úçÔ∏è {notification['objectData']['author']['displayName']} –æ—Å—Ç–∞–≤–∏–ª(–∞) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ {notification['objectData']['taskSolution']['task']['title']} —É—Ä–æ–∫–∞ {notification['objectData']['taskSolution']['task']['lesson']['title']}:" \
                    f"<code>{notification['objectData']['data']}</code> \n"
        elif notification_type == "submission-checked":
            text += f"üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ <b>{notification['objectData']['taskSolution']['task']['title']}</b> —É—Ä–æ–∫–∞ <b>{notification['objectData']['taskSolution']['task']['lesson']['title']}</b> –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ <b>{solution_result[notification['objectData']['taskSolution']['status']['type']]}</b> \n"

        await app.bot.send_message(user_id, text, reply_markup=reply_markup)

